# Kompletter Umsetzungsplan: Diktier-Assistent f√ºr DAMPSOFT

## üéØ Ziel
Ein per Hotkey (z.B. F9) startbarer Desktop-Assistent, der Patientengespr√§che transkribiert und automatisch in das Kommentarfeld von DAMPSOFT einf√ºgt.

---

## üìã Vorbereitung auf Ihrem MacBook

### 1. Code-Entwicklung (auf Ihrem Mac)

**a) Neues Python-Skript erstellen:**
- √ñffnen Sie einen Text-Editor (TextEdit im Plain-Text-Modus oder besser: Visual Studio Code kostenlos downloaden)
- Erstellen Sie eine neue Datei `diktier_desktop.py`

**b) Ben√∂tigter Code:**
```python
import tkinter as tk
from tkinter import ttk
import sounddevice as sd
import soundfile as sf
import numpy as np
import google.generativeai as genai
import json
import os
import threading
import time
from datetime import datetime
import tempfile
import keyboard

class DiktierAssistent:
    def __init__(self, root):
        self.root = root
        self.root.title("Diktier-Assistent f√ºr DAMPSOFT")
        self.root.geometry("400x250")
        self.root.attributes('-topmost', True)  # Immer im Vordergrund
        
        # Google AI Setup
        self.setup_google_ai()
        
        # Audio-Variablen
        self.is_recording = False
        self.audio_data = []
        self.sample_rate = 16000
        
        # UI erstellen
        self.create_ui()
        
    def setup_google_ai(self):
        # JSON-Schl√ºssel laden
        try:
            with open('service-account-key.json', 'r') as f:
                credentials = json.load(f)
            
            # Hier m√ºssen Sie den korrekten Authentifizierungsprozess f√ºr Service Accounts implementieren
            # F√ºr Gemini API verwenden Sie normalerweise einen API-Key, nicht einen Service Account
            # Falls Sie einen Service Account haben, ben√∂tigen Sie google-auth:
            # from google.oauth2 import service_account
            # credentials = service_account.Credentials.from_service_account_file('service-account-key.json')
            
            genai.configure(api_key="YOUR_API_KEY")  # Tempor√§r - ersetzen durch Service Account Auth
            self.model = genai.GenerativeModel('models/gemini-1.5-flash-latest')
            
        except Exception as e:
            print(f"Fehler beim Laden der Credentials: {e}")
            
    def create_ui(self):
        # Status-Label
        self.status_label = ttk.Label(self.root, text="Bereit - Dr√ºcken Sie F9 oder klicken Sie Start", 
                                     font=("Arial", 12))
        self.status_label.pack(pady=20)
        
        # Start/Stop Button
        self.record_button = ttk.Button(self.root, text="‚ñ∂Ô∏è Start Aufnahme", 
                                       command=self.toggle_recording,
                                       style="Accent.TButton")
        self.record_button.pack(pady=10)
        
        # Progress Bar
        self.progress = ttk.Progressbar(self.root, mode='indeterminate')
        self.progress.pack(pady=10, padx=20, fill=tk.X)
        
        # Info-Text
        info_text = "F9: Start/Stop | ESC: Fenster schlie√üen"
        ttk.Label(self.root, text=info_text, font=("Arial", 9)).pack(pady=5)
        
        # Keyboard Shortcuts
        self.root.bind('<F9>', lambda e: self.toggle_recording())
        self.root.bind('<Escape>', lambda e: self.root.quit())
        
    def toggle_recording(self):
        if not self.is_recording:
            self.start_recording()
        else:
            self.stop_recording()
            
    def start_recording(self):
        self.is_recording = True
        self.audio_data = []
        self.record_button.config(text="‚èπÔ∏è Stop Aufnahme")
        self.status_label.config(text="üî¥ Aufnahme l√§uft...")
        
        # Aufnahme in separatem Thread
        self.record_thread = threading.Thread(target=self.record_audio)
        self.record_thread.start()
        
    def record_audio(self):
        with sd.InputStream(samplerate=self.sample_rate, channels=1, 
                           callback=self.audio_callback):
            while self.is_recording:
                time.sleep(0.1)
                
    def audio_callback(self, indata, frames, time, status):
        if self.is_recording:
            self.audio_data.append(indata.copy())
            
    def stop_recording(self):
        self.is_recording = False
        self.record_button.config(text="‚è≥ Verarbeite...", state="disabled")
        self.status_label.config(text="Verarbeite Aufnahme...")
        self.progress.start()
        
        # Verarbeitung in separatem Thread
        process_thread = threading.Thread(target=self.process_audio)
        process_thread.start()
        
    def process_audio(self):
        try:
            # Audio zusammenf√ºgen und speichern
            audio_array = np.concatenate(self.audio_data, axis=0)
            
            # Tempor√§re Datei
            with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as tmp_file:
                sf.write(tmp_file.name, audio_array, self.sample_rate)
                temp_path = tmp_file.name
            
            # Upload zu Gemini
            self.root.after(0, lambda: self.status_label.config(text="Lade Audio hoch..."))
            audio_file = genai.upload_file(path=temp_path)
            
            # Transkription
            self.root.after(0, lambda: self.status_label.config(text="Transkribiere..."))
            response_transcribe = self.model.generate_content(
                ["Bitte transkribiere das folgende deutsche Audio exakt wie gesprochen:", audio_file],
                request_options={'timeout': 600}
            )
            transcript = response_transcribe.text
            
            # Zusammenfassung
            self.root.after(0, lambda: self.status_label.config(text="Erstelle Zusammenfassung..."))
            prompt_summarize = """
            Du bist eine zahnmedizinische Fachassistenz. Erstelle aus der folgenden Transkription eine strukturierte Dokumentation f√ºr DAMPSOFT.
            
            Formatiere die Ausgabe wie folgt:
            
            BEFUND:
            [Hier die relevanten Befunde]
            
            DIAGNOSE:
            [Diagnosen mit ICD-10 wenn m√∂glich]
            
            THERAPIE:
            [Durchgef√ºhrte/geplante Behandlungen]
            
            BEMERKUNGEN:
            [Weitere relevante Informationen]
            
            Transkription:
            """
            
            response_summarize = self.model.generate_content(prompt_summarize + transcript)
            summary = response_summarize.text
            
            # In Datei speichern f√ºr Power Automate
            output_path = r"C:\DiktierAssistent\output.txt"
            os.makedirs(os.path.dirname(output_path), exist_ok=True)
            
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(summary)
                
            # Aufr√§umen
            genai.delete_file(audio_file.name)
            os.unlink(temp_path)
            
            # UI aktualisieren
            self.root.after(0, self.reset_ui)
            self.root.after(0, lambda: self.status_label.config(
                text="‚úÖ Erfolgreich! Text wurde an DAMPSOFT √ºbergeben."))
            
        except Exception as e:
            self.root.after(0, lambda: self.status_label.config(
                text=f"‚ùå Fehler: {str(e)}"))
            self.root.after(0, self.reset_ui)
            
    def reset_ui(self):
        self.progress.stop()
        self.record_button.config(text="‚ñ∂Ô∏è Start Aufnahme", state="normal")
        
        # Nach 3 Sekunden zur√ºck zu "Bereit"
        self.root.after(3000, lambda: self.status_label.config(
            text="Bereit - Dr√ºcken Sie F9 oder klicken Sie Start"))

# Hauptprogramm
if __name__ == "__main__":
    # Pr√ºfen ob bereits eine Instanz l√§uft
    import psutil
    current_pid = os.getpid()
    for proc in psutil.process_iter(['pid', 'name']):
        if proc.info['name'] == 'python.exe' and proc.info['pid'] != current_pid:
            # Pr√ºfen ob es unser Skript ist
            try:
                if 'diktier_desktop.py' in ' '.join(proc.cmdline()):
                    print("Anwendung l√§uft bereits")
                    exit()
            except:
                pass
    
    root = tk.Tk()
    app = DiktierAssistent(root)
    
    # Globaler Hotkey (F9) auch wenn Fenster nicht im Fokus
    keyboard.add_hotkey('f9', app.toggle_recording)
    
    root.mainloop()
```

**c) Zus√§tzliche Dateien vorbereiten:**

1. **requirements.txt** erstellen:
```
sounddevice
soundfile
numpy
google-generativeai
keyboard
psutil
```

2. **Power Automate Flow** (flow_dampsoft.txt):
```
1. Trigger: Datei√ºberwachung auf C:\DiktierAssistent\output.txt
2. Aktion: Dateiinhalt lesen
3. Aktion: Text in Zwischenablage kopieren
4. Aktion: DAMPSOFT-Fenster fokussieren (Fenstertitel: "DAMPSOFT")
5. Aktion: Zum Kommentarfeld navigieren (Tab-Taste x-mal)
6. Aktion: Strg+A (alles markieren)
7. Aktion: Strg+V (einf√ºgen)
8. Aktion: Datei l√∂schen
```

---

## üöÄ Test-Phase (Behandlungszimmer-PC)

### 2. Dateien auf Test-PC √ºbertragen

**a) Auf Ihrem Mac:**
1. Erstellen Sie einen Ordner "DiktierAssistent_Transfer"
2. Kopieren Sie hinein:
   - `diktier_desktop.py`
   - `requirements.txt`
   - `flow_dampsoft.txt`
   - `service-account-key.json` (Ihr Google Service Account)
   - Diese Anleitung als PDF

**b) Transfer via USB:**
1. USB-Stick an Mac anschlie√üen (USB-C zu USB Adapter)
2. Ordner auf USB-Stick kopieren
3. USB-Stick sicher auswerfen
4. Am Windows-PC einstecken

### 3. Installation auf Test-PC

**a) Python installieren:**
1. Browser √∂ffnen: python.org
2. Download Python 3.12.x (64-bit)
3. Bei Installation: ‚úÖ "Add Python to PATH" ankreuzen!
4. Installation durchf√ºhren

**b) Code-Editor (optional aber empfohlen):**
1. Notepad++ downloaden (kostenlos) oder
2. Visual Studio Code (kostenlos, mehr Features)

**c) Projekt einrichten:**
1. Ordner `C:\DiktierAssistent` erstellen
2. Alle Dateien vom USB-Stick hierhin kopieren
3. Windows-Eingabeaufforderung √∂ffnen (Win+R, "cmd")
4. Navigieren: `cd C:\DiktierAssistent`
5. Virtuelle Umgebung erstellen:
   ```
   python -m venv venv
   venv\Scripts\activate
   ```
6. Pakete installieren:
   ```
   pip install -r requirements.txt
   ```

### 4. Erste Tests

**a) Skript direkt testen:**
```
python diktier_desktop.py
```

**b) Problembehebung:**
- Fehler "Modul nicht gefunden": `pip install [modulname]`
- Mikrofon-Fehler: Windows-Soundeinstellungen pr√ºfen
- API-Fehler: Service-Account-Key pr√ºfen

### 5. Power Automate einrichten

**a) Power Automate Desktop installieren:**
1. Microsoft Store √∂ffnen
2. "Power Automate" suchen und installieren
3. Mit Microsoft-Konto anmelden

**b) Flow erstellen:**
1. Neuer Flow: "DAMPSOFT Diktat-Integration"
2. Trigger hinzuf√ºgen: "On file created"
   - Ordner: `C:\DiktierAssistent`
   - Datei: `output.txt`
3. Aktionen gem√§√ü flow_dampsoft.txt hinzuf√ºgen
4. DAMPSOFT-spezifische Anpassungen:
   - Fenstertitel von DAMPSOFT ermitteln (mit Alt+Tab sichtbar)
   - Anzahl TAB-Tastendr√ºcke zum Kommentarfeld testen
5. Flow aktivieren

### 6. Desktop-Verkn√ºpfung mit Hotkey

**a) Batch-Datei erstellen** (start_diktat.bat):
```batch
@echo off
cd /d C:\DiktierAssistent
venv\Scripts\python.exe diktier_desktop.py
```

**b) Desktop-Verkn√ºpfung:**
1. Rechtsklick auf Desktop ‚Üí Neu ‚Üí Verkn√ºpfung
2. Ziel: `C:\DiktierAssistent\start_diktat.bat`
3. Name: "Diktier-Assistent"
4. Rechtsklick auf Verkn√ºpfung ‚Üí Eigenschaften
5. Tastenkombination: F9 (oder andere)
6. Ausf√ºhren: Minimiert

### 7. Kompletttest

1. DAMPSOFT √∂ffnen und Patient ausw√§hlen
2. F9 dr√ºcken (Assistent startet)
3. Kurzen Test-Text sprechen
4. F9 erneut dr√ºcken (stoppt Aufnahme)
5. Warten bis "Erfolgreich" erscheint
6. Pr√ºfen ob Text in DAMPSOFT erscheint

---

## üè¢ Rollout auf alle 5 PCs

### 8. Deployment-Paket erstellen

**Auf Test-PC nach erfolgreichen Tests:**

1. **Installer-Ordner** erstellen mit:
   - Python-Installer (python-3.12.x-amd64.exe)
   - Kompletter C:\DiktierAssistent Ordner (gezippt)
   - install_diktat.bat (Automatisiertes Setup-Skript)
   - Power Automate Flow Export (.pad Datei)

2. **install_diktat.bat**:
```batch
@echo off
echo Installing Diktier-Assistent...

REM Python installieren (silent)
python-3.12.x-amd64.exe /quiet PrependPath=1

REM Warten
timeout /t 30

REM Projekt entpacken
xcopy /E /I DiktierAssistent C:\DiktierAssistent

REM Virtuelle Umgebung und Pakete
cd C:\DiktierAssistent
python -m venv venv
call venv\Scripts\activate
pip install -r requirements.txt

REM Desktop-Verkn√ºpfung
copy start_diktat.lnk "%USERPROFILE%\Desktop\"

echo Installation abgeschlossen!
pause
```

### 9. Installation auf jedem PC

1. Deployment-Paket auf USB-Stick
2. An jedem PC:
   - Als Administrator anmelden
   - install_diktat.bat ausf√ºhren
   - Power Automate Flow importieren
   - DAMPSOFT-spezifische Anpassungen testen
   - Hotkey-Verkn√ºpfung pr√ºfen

### 10. Zentrale Wartung (Optional)

**Server-basierte Updates:**
1. Netzlaufwerk erstellen: `\\Server\DiktierAssistent`
2. Update-Skript das neue Versionen vom Server holt
3. Geplante Task f√ºr automatische Updates

---

## ‚úÖ Checkliste pro PC

- [ ] Python 3.12 installiert (mit PATH)
- [ ] C:\DiktierAssistent eingerichtet
- [ ] Alle Python-Pakete installiert
- [ ] Service-Account-Key vorhanden
- [ ] Power Automate Flow l√§uft
- [ ] Desktop-Verkn√ºpfung mit F9
- [ ] Test mit DAMPSOFT erfolgreich
- [ ] Mikrofon funktioniert
- [ ] Autostart eingerichtet (optional)

---

## üîß Troubleshooting

**Problem: "Python nicht gefunden"**
- L√∂sung: PATH-Variable pr√ºfen, Python neu installieren

**Problem: "Mikrofon-Fehler"**
- L√∂sung: Windows-Datenschutz ‚Üí Mikrofon-Zugriff erlauben

**Problem: "DAMPSOFT erh√§lt keinen Text"**
- L√∂sung: Power Automate Flow debuggen, Fenstertitel pr√ºfen

**Problem: "API-Authentifizierung fehlgeschlagen"**
- L√∂sung: Service-Account-Key pr√ºfen, Berechtigungen checken

---

## üìû Support-Kontakte

- Interner IT-Support: [Nummer]
- Google Cloud Support: [falls vorhanden]
- DAMPSOFT Support: [Nummer]

---

## üéØ Erwartetes Endergebnis

Nach vollst√§ndiger Implementation:
1. Arzt dr√ºckt F9 ‚Üí Fenster erscheint
2. Arzt spricht ‚Üí Visuelles Feedback
3. Arzt dr√ºckt F9 ‚Üí Verarbeitung startet
4. Nach ~10-15 Sekunden: Text erscheint automatisch in DAMPSOFT
5. Assistent ist bereit f√ºr n√§chste Aufnahme